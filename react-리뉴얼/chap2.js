// next에는 기본적으로 webpack이 내장되어있다.

//*** 개발시! 원칙
//1. 가로 먼저 짜고 세로를 그담에 짜자!
//2. 반응형 앱은 모바일을 먼저 구성하고 데스크탑을 구성하자!

//*** 페이지가 아닌 다른 컴포넌트는 컴포넌트 폴더에 넣는다
// 그리고 화면 페이지별로 기준으로 컴포넌트 폴더를 만들고 파일을 넣는다
// (훅스는 컴포넌트/컨테이너 별로 나누는걸 추천하지 않기 때문에... 컴포넌트 폴더안에서만 컴포넌트를 넣어둔다)

//*** 컴포넌트에 props로 넘겨주는 함수에는 useCallback을 꼭!! 쓰자! 그래야 최적화가 된다

//*** 리엑트 태그의 style에 객체를 넣으면 안된다!!
// {} === {}  는 false가 나오기 때문에(객체끼리 비교는 false됨)  
// 리액트는 이전과 비교해서 virtual DOM을 돌리기 때문에... 다시 리랜더링 된다... 그래서 스타일드컴포넌트를 사용한다

//*** useCallback은 함수를 캐싱한다!!
//*** useMemo는 값을 캐싱한다!!
//const style = useMemo(() => ({ marginTop: 10 }), []);
//(리랜더링 최적화 )
//*** 처음 실행될때! 함수가 1번은 실행이 된다!! 
//useCallback(() => {}, [])  에서 [] 배열부분이 바뀌지 않는 이상 이전값과 비교해서 같으면 랜더링을 하지 않는다
//useMemo 는 값을 비교해서 랜더링을 하지 않는다
//*** 리랜더링한다고 해서... return 부분이 전부 실행되는게 아니라... 바뀐부분만 구분하여 랜더링을 하게 된다
//*** return 부분을 virtual DOM 이라고 보면 된다! (이전과 달라진 부분만 리랜더링 해준다)

//*** <a href="주소" target="_blank" rel="noreferrer noopener">  
//  에서 _blank 는 새창을 연다는 뜻 
//  새창을 열때 referrer는 이전 페이지.. opener는 누가 나를 열었는지를 뜻한다
// 보안에 관련된 것이다 referrer, opener의 정보를 보내주면 보안에 문제가 생긴다


//*** 기존은 컨테이너스, 컴포넌트로 나눠서 처리  
// 하지만!! 훅스에선 컨테이너스 -> 컴포넌트 형식으로 받는게 아니라... 바로 컴포넌트에서 정보를 받기 때문에
// 굳이 폴더를 나누는것을 추천하지 않는다!!


//*** 처음 화면구조를 짤때... <div></div> 이런식으로 세세하게 짜지말고.. 아래처럼 크게 가상의 컴포넌트를 생각하고
// 화면을 구성한다!!
// return (
//   <AppLayout>                  //이런식으로 컴포넌트로 화면구성을 짜고 세부적으로 들어간다!!
//     <NicknameEditForm />   
//     <FollowList
//       header="팔로잉 목록"
//       data={followingList}
//     />
//     <FollowList
//       header="팔로워 목록"
//       data={followerList}
//     />
//   </AppLayout>
// );


//*** Form도 reactFrom을 통해 만드는게 효율적이다!!!! (유효성검사도 된다)


//*** HOOK을 사용할 수 있는 조건!! 
// 반복문, 조건문, 함수안에서는 안된다... 
// 무조건 컴포넌트 안에서만 된다!!
// 유일한 예외는 customHooks 이다!!
// 